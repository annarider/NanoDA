group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(as.numeric(friend_count), n = n())
pf %>%
pf %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(as.numeric(friend_count)), n = n())
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
pf.fc_by_age_gender <- pf %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(as.numeric(friend_count)), n = n()) %>%
ungroup() %>%
arrange(age)
pf.fc_by_age_gender
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram()
ggplot(aes(x = gender, y = age),
data = subset(pf, !is.na(gender))) + geom_histogram(stat="identity")
ggplot(data = pf.fc_by_age_gender, aes(x = age, y = median_friend_count)) +
geom_line()
ggplot(data = pf.fc_by_age_gender, aes(x = age, y = median_friend_count), color = gender) +
geom_line()
ggplot(data = pf.fc_by_age_gender, aes(x = age, y = median_friend_count)) +
geom_line(aes(color = gender), stat = 'summary')
pf.fc_by_age_gender <- pf %>%
filter(!is.na(gender)) %>%
group_by(age, gender) %>%
summarise(mean_friend_count = mean(friend_count),
median_friend_count = median(as.numeric(friend_count)), n = n()) %>%
ungroup() %>%
arrange(age)
ggplot(data = pf.fc_by_age_gender, aes(x = age, y = median_friend_count)) +
geom_line(aes(color = gender), stat = 'summary')
ggplot(data = pf.fc_by_age_gender, aes(x = age, y = median_friend_count)) +
geom_line(aes(color = gender))
View(diamonds)
head(diamonds$price,2)
head(diamonds$price,3)
diamonds$price[2,]
diamonds[2,]
diamonds[2:3,]
diamonds[2:3,1:2]
diamonds[2:3,carat]
diamonds[2:3,diamonds$carat]
names(diamonds)
subset(diamonds, carat & price)
subset(diamonds, $carat)
subset(diamonds, diamonds$carat,diamonds$price)
diamonds %>%
summarise(carat, price)
diamonds[carat, price]
diamonds[carat, x]
diamonds(carat, x)
?subset
subset(diamonds, select = carat & select = price)
subset(diamonds, select = carat:price)
subset(diamonds, select = c(carat,price)
subset(diamonds, select = c(carat,price))
subset(diamonds, TRUE, select = c(carat,price))
install.packages(c("arm", "Formula", "manipulate", "Matrix", "network"))
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
library("ggplot2", lib.loc="/usr/local/Cellar/r/3.1.3/R.framework/Versions/3.1/Resources/library")
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
names(pf)
pf$year_joined <- trunc(abs(pf$tenure/365 - 2014))
pf$year_joined.bucket <- cut(pf$year_joined, breaks = c(2004,2009,2011,2012,2014))
pf$prop_initiated <- pf$friendships_initiated/pf$friend_count
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
ggplot(data = pf, aes(x = tenure, y = prop_initiated)) +
geom_line(stat = 'summary', fun.y = median, aes(color = year_joined.bucket))
is.data.frame(pf)
install.packages("Matrix")
update.packages(ggplot2)
library("memisc", lib.loc="/usr/local/Cellar/r/3.1.3/R.framework/Versions/3.1/Resources/library")
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
```
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
str(diamonds$cut)
setwd("/Users/horsepower/Dropbox/Udacity/NanoDA/EDAwithR/Project3/")
companies <- read.csv("Inc5000_Companies_2014_subset.csv")
names(companies)[names(companies) == 'X'] <- 'row_num'
companies$rank <- as.ordered(companies$rank)
companies$revenue2013 <- companies$revenue/((companies$growth/100) + 1)
companies$growth_dollar <- companies$revenue - companies$revenue2013
population <- read.csv("state_population_census.csv")
companies.population <- merge(companies, population, by.x = "state_l", by.y = "Geographic_Area")
View(companies)
names(companies)[names(companies) == 'revenue'] <- 'revenue2014'
names(companies)[names(companies) == 'growth'] <- 'growth2014_percentage'
names(companies)[names(companies) == 'growth'] <- 'growth_percentage'
View(companies)
names(companies)[names(companies) == 'growth2014_percentage'] <- 'growth_percentage'
View(companies)
companies.population <- merge(companies, population, by.x = "state_l", by.y = "Geographic_Area")
View(companies.population)
companies.population$growth_per_capita <- companies.population$growth_dollar/Est_2014
companies.population$growth_per_capita <- companies.population$growth_dollar/companies.populationEst_2014
companies.population$growth_per_capita <- companies.population$growth_dollar/companies.population$Est_2014
str(companies.population)
str(population)
population <- read.csv("state_population_census.csv", stringsAsFactors=FALSE)
str(population)
population <- read.csv("state_population_census.csv", na.strings = "N/A")
str(population)
population <- read.csv("state_population_census.csv", stringsAsFactors=FALSE, na.strings = "N/A")
str(population)
population <- read.csv("state_population_census.csv", stringsAsFactors=FALSE)
str(population)
convert_cols <- 2:
convert_cols
convert_cols <- 2:8
convert_cols
population[, convert_cols] <- lapply(population[, convert_cols],
function(x) {as.numeric(gsub(",", "", population))})
str(population)
View(population)
gsub(",", "", population$Est_2010)
str(gsub(",", "", population$Est_2010))
str(as.numeric(gsub(",", "", population$Est_2010)))
population[, convert_cols] <- lapply(population[, convert_cols],
function(x) {as.numeric(gsub(",", "", population[, convert_cols]))})
str(as.numeric(gsub(",", "", population$2:8)))
partWithNumbers <- population[c("Census_April1": "Est_2014")]
View(companies.population)
companies.population <- merge(x = companies, y = subset(population, select = "Est_2014"), by.x = "state_l",
by.y = "Geographic_Area")
companies.population <- merge(x = companies, y = subset(population, select = "Est_2014" & select = "Geographic_Area"), by.x = "state_l",
by.y = "Geographic_Area")
companies.population <- merge(x = companies, y = subset(population, select = c("Est_2014", "Geographic_Area"), by.x = "state_l",
by.y = "Geographic_Area")
by.y = "Geographic_Area")
companies.population <- merge(x = companies, y = subset(population, select = c("Est_2014", "Geographic_Area")), by.x = "state_l", by.y = "Geographic_Area")
names(companies.population)
companies.population <- merge(x = companies, y = subset(population, select = c("Est_2014", "Geographic_Area")), by.x = "state_l", by.y = "Geographic_Area")
names(companies.population)
View(companies.population)
names(companies)[names(companies) == 'Est_2014'] <- 'state_population2014'
names(companies.population)
names(companies)[names(companies) == 'Est_2014'] <- 'state_population2014'
names(companies.population)
names(companies.population)[names(companies.population) == 'Est_2014'] <- 'state_population2014'
names(companies.population)
unique(companies.population$Est_2014)
str(companies.population)
str(as.numeric(gsub(",", "", companies.population$state_population2014)))
companies.population$state_population2014 <- as.numeric(gsub(",", "", companies.population$state_population2014)))
companies.population$state_population2014 <- as.numeric(gsub(",", "", companies.population$state_population2014))
names(companies.population)
str(companies.population)
companies.population$growth_per_capita <- companies.population$growth_dollar/
str(companies.population)
companies.population$growth_per_capita <- companies.population$growth_dollar/
companies.population$state_population2014
str(companies.population)
View(companies.population)
View(companies)
library(dplyr)
state_growth <- companies %>%
group_by(state_l) %>%
summarise(state_growth_dollar = sum(growth_dollar)) %>%
ungroup() %>%
arrange(state_l)
View(state_growth)
state_growth <- merge(x = state_growth, y = subset(population, select = c("Geographic_Area", "Est_2014")), by.x = "state_l", by.y = "Geographic_Area")
View(state_growth)
names(state_growth)[names(state_growth) == 'Est_2014'] <- 'state_population2014'
names(state_growth)
state_growth$state_population2014 <- as.numeric(gsub(",", "", state_growth$state_population2014))
state_growth$state_population2014 <- as.numeric(gsub(",", "",
state_growth$state_population2014))
state_growth$growth_per_capita <- state_growth$growth_dollar/
state_growth$state_population2014
source('~/.active-rstudio-document', echo=TRUE)
state_growth$state_population2014 <- as.numeric(gsub(",", "",
state_growth$state_population2014))
state_growth$growth_per_capita <- state_growth$growth_dollar/
state_growth$state_population2014
View(state_growth)
state_growth$growth_per_capita <- state_growth$state_growth_dollar/
state_growth$state_population2014
View(state_growth)
library("ggplot2", lib.loc="/usr/local/Cellar/r/3.1.3/R.framework/Versions/3.1/Resources/library")
ggplot(data = state_growth, aes(x = state_growth_dollar)) +
geom_histogram()
ggplot(data = state_growth, aes(x = state_growth_dollar)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_continuous(limits = c(0, 1000))
ggplot(data = state_growth, aes(x = state_growth_dollar)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_continuous(limits = c(0, 1000))
ggplot(data = companies, aes(x = growth)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_continuous(limits = c(0, 1000))
View(companies)
ggplot(data = companies, aes(x = growth_percentage)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_continuous(limits = c(0, 1000))
ggplot(data = companies, aes(x = growth_percentage)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_continuous(limits = c(0, 1000))
ggplot(data = companies, aes(x = growth)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
ggplot(data = companies, aes(x = growth_percentage)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(data = companies, aes(x = growth_percentage)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(data = companies, aes(x = growth_dollar)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(data = companies, aes(x = growth_dollar)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_continuous(limits = c(0, 1000))
ggplot(data = companies, aes(x = growth_dollar)) +
geom_histogram(                   color = 'black', fill = '#F79420') +
scale_x_continuous(limits = c(0, 1000))
ggplot(data = companies, aes(x = growth_dollar)) +
geom_histogram(                   color = 'black', fill = '#F79420')
ggplot(data = companies, aes(x = growth_dollar)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420')
ggplot(data = companies, aes(x = growth_percentage)) +
str(state_growth)
str(companies)
ggplot(data = state_growth, aes(x = state_growth_dollar)) +
geom_histogram(color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = state_growth_dollar)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_y_continuous(name = "State Growth Dollars", labels = comma)
library(scales)
ggplot(data = state_growth, aes(x = state_growth_dollar)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_y_continuous(name = "State Growth Dollars", labels = comma)
ggplot(data = state_growth, aes(x = state_growth_dollar)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(name = "State Growth Dollars", labels = comma)
ggplot(data = companies, aes(x = growth_per_capita)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(name = "State Growth per capita", labels = comma)
ggplot(data = state_growth, aes(x = growth_per_capita)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(name = "State Growth per capita", labels = comma)
ggplot(data = state_growth, aes(x = state_l)) +
geom_histogram(color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = state_l)) +
geom_histogram(stat = 'identity', color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = state_l)) +
geom_histogram(stat = 'identity', color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = growth_per_capita, y = state_l)) +
geom_histogram(color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_histogram(color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
str(state_growth)
state_growth$growth_per_capita
sort(state_growth$growth_per_capita, decreasing = TRUE)
ggplot(data = state_growth, aes(x = state_l, y = sort(state_growth$growth_per_capita, decreasing = TRUE))) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = sort(state_growth$growth_per_capita, decreasing = TRUE), aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
order(state_growth$growth_per_capita, decreasing =  TRUE)
list(order(state_growth$growth_per_capita, decreasing =  TRUE))
ggplot(data = (order(state_growth$growth_per_capita, decreasing =  TRUE), aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = order(state_growth$growth_per_capita, decreasing =  TRUE), aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
sort(state_growth$growth_per_capita, decreasing =  TRUE)
state_growth[with(state_growth, order(-growth_per_capita)), ]
state_growth <- state_growth[with(state_growth, order(-growth_per_capita)), ]
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
View(state_growth)
library(dplyr)
state_growth <- companies %>%
group_by(state_l) %>%
summarise(state_growth_dollar = sum(growth_dollar)) %>%
ungroup() %>%
arrange(state_l)
state_growth <- merge(x = state_growth,
y = subset(population,
select = c("Geographic_Area", "Est_2014")),
by.x = "state_l", by.y = "Geographic_Area")
names(state_growth)[names(state_growth) == 'Est_2014'] <- 'state_population2014'
names(state_growth)
str(state_growth)
View(state_growth)
state_growth$state_population2014 <- as.numeric(gsub(",", "",
state_growth$state_population2014))
state_growth$growth_per_capita <- state_growth$state_growth_dollar/
state_growth$state_population2014
arrange(state_growth, desc(growth_per_capita))
ggplot(data = arrange(state_growth, desc(growth_per_capita)), aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
state_growth <- arrange(state_growth, desc(growth_per_capita))
table(state_growth)
View(state_growth)
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
str(state_growth)
ggplot(data = state_growth, aes(x = state_l, y = as.factor(growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = state_l, y = as.factor(growth_per_capita)) +
ggplot(data = state_growth, aes(x = state_l, y = as.factor(growth_per_capita))) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = as.factor(state_l), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
View(state_growth)
ggplot(data = state_growth, aes(x = growth_per_capita, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = as.factor(state_l), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = as.factor(state_l, levels = growth_per_capita), y = growth_per_capita)) +
gplot(data = state_growth, aes(x = as.factor(state_l, levels = growth_per_capita), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = as.factor(state_l, levels = growth_per_capita), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = as.factor(state_l, levels = state_l), y = growth_per_capita)) +
ggplot(data = state_growth, aes(x = as.factor(state_l, levels = state_l), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = as.factor(state_l, levels = state_l), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = as.factor(state_l), y = growth_per_capita)) +
ggplot(data = state_growth, aes(x = as.factor(state_l), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = as.factor(state_l)), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = as.factor(state_l), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = as.factor(state_l, levels = state_l), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = factor(state_l, levels = state_l), y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = factor(state_l, levels = state_l),
y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420') +
xlab("State") +
ylab("Fast growth dollars per capita") +
# densely packed x axis labels need spacing
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) +
ggtitle("Revenue growth per capita by state")
ggplot(data = state_growth, aes(x = factor(state_l, levels = state_l),
y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420') +
xlab("State") +
ylab("Fast growth dollars per capita") +
# densely packed x axis labels need spacing
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) +
ggtitle("Revenue growth by state, normalized by population")
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420')
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420') +
theme(axis.text.x = element_text(angle = 45,
hjust = 1))
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_scatter()
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_point()
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_box()
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_boxplot()
options(scipen=999)
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 3)
)
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_point()
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point()
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 3)) +
xlab("Revenue (Millions)") +
ylab("Growth (percent)") +
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 3)) +
xlab("Revenue (Millions)") +
ylab("Growth (percent)")
```
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 3000)) +
xlab("Revenue (Millions)") +
ylab("Growth (percent)")
14/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 3000)) +
scale_y_continuous(limits = c(0, 30000))
xlab("Revenue (Millions)") +
ylab("Growth (percent)")
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 3000)) +
scale_y_continuous(limits = c(0, 30000))
xlab("Revenue (Millions)") +
ylab("Growth (percent)")
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 1500)) +
scale_y_continuous(limits = c(0, 20000))
xlab("Revenue (Millions)") +
ylab("Growth (percent)")
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 1300)) +
scale_y_continuous(limits = c(0, 15000))
xlab("Revenue (Millions)") +
ylab("Growth (percent)")
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 1300), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 15000), aes(y = "Growth (percent)"))
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_point()
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_point()
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 1300), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 15000), aes(y = "Growth (percent)"))
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter() +
scale_x_continuous(limits = c(0, 1300), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 15000), aes(y = "Growth (percent)"))
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/2) +
scale_x_continuous(limits = c(0, 1300), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 15000), aes(y = "Growth (percent)"))
```
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/20) +
scale_x_continuous(limits = c(0, 1300), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 15000), aes(y = "Growth (percent)"))
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/5) +
scale_x_continuous(limits = c(0, 1300), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 15000), aes(y = "Growth (percent)"))
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/5) +
scale_x_continuous(limits = c(0, 500), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 5000), aes(y = "Growth (percent)"))
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/5) +
scale_x_continuous(limits = c(0, 500), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 5000), aes(y = "Growth (percent)")) +
scale_x_log10()
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/5) +
scale_x_continuous(limits = c(0, 100), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 1000), aes(y = "Growth (percent)")) +
scale_x_log10()
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/2) +
scale_x_continuous(limits = c(0, 100), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 1000), aes(y = "Growth (percent)")) +
scale_x_log10()
