ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_dollar/1000000)) +
geom_jitter(alpha = 1/5) +
geom_rug() +
scale_x_continuous(limits = c(0, 500)) +
scale_y_continuous(limits = c(0, 400))
geom_boxplot, geom_point, geom_violin, geom_jitter with geom_rug, geom_point(stat = 'summary'), geom_bin2d, geom_tile, geom_density2d, geom_point(alpha = 1/10, color = 'gray') + geom_line(stat = 'summary', fun.y = median), geom_point(alpha = 1/10, color = 'gray') + geom_step(stat = 'summary', fun.y = median)
ggplot(data = companies, aes(x = revenue2014, y = growth_dollar)) +
geom_point(stat = 'summary')
ggplot(data = companies, aes(x = revenue2014, y = growth_dollar)) +
geom_bin2d()
ggplot(data = companies, aes(x = revenue2014, y = growth_dollar)) +
geom_tile()
ggplot(data = companies, aes(x = revenue2014, y = growth_dollar)) +
geom_density2d()
ggplot(data = companies, aes(x = revenue2014, y = growth_dollar)) +
geom_density()
ggplot(data = companies, aes(x = revenue2014, y = growth_dollar)) +
geom_step()
ggplot(data = companies, aes(x = revenue2014, y = growth_dollar)) +
geom_step(stat = 'summary', fun.y = median)
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_dollar/1000000)) +
geom_jitter(alpha = 1/5, color = 'steelblue') +
geom_rug() +
scale_x_continuous(limits = c(0, 500)) +
scale_y_continuous(limits = c(0, 400))
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_dollar/1000000)) +
geom_jitter(alpha = 1/3, color = 'steelblue') +
geom_rug() +
scale_x_continuous(limits = c(0, 500)) +
scale_y_continuous(limits = c(0, 400))
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_dollar/1000000)) +
geom_jitter(alpha = 1/3, color = 'steelblue') +
geom_rug() +
scale_x_continuous(limits = c(0, 100)) +
scale_y_continuous(limits = c(0, 100))
ggplot(data = companies, aes(x = industry, y = yrs_on_list)) +
geom_violin() +
scale_y_continuous(limits = c(0, 8)) +
theme(axis.text.x = element_text(angle = 45,
hjust = 1))
ggplot(data = companies, aes(x = revenue)) +
geom_histogram()
range(companies$revenue)
ggplot(data = companies, aes(x = industry, y = yrs_on_list)) +
geom_boxplot()
ggplot(data = companies, aes(x = industry, y = yrs_on_list)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45,
hjust = 1))
ggplot(data = companies, aes(x = industry, y = yrs_on_list)) +
geom_boxplot() +
scale_y_continuous(limits = c(0, 8)) +
theme(axis.text.x = element_text(angle = 45,
hjust = 1))
ggplot(data = companies, aes(x = industry, y = yrs_on_list)) +
geom_violin() +
scale_y_continuous(limits = c(0, 8)) +
theme(axis.text.x = element_text(angle = 45,
hjust = 1))
ggplot(data = companies, aes(x = industry, y = growth_percentage)) +
geom_jitter(alpha = 1/4) +
scale_y_continuous(limits = c(0, 7500)) +
theme(axis.text.x = element_text(angle = 45,
hjust = 1))
ggplot(data = companies, aes(x = revenue2014, y = growth_dollar)) +
geom_jitter() +
geom_rug()
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_dollar/1000000)) +
geom_jitter(alpha = 1/3, color = 'steelblue') +
geom_rug() +
scale_x_continuous(limits = c(0, 500)) +
scale_y_continuous(limits = c(0, 400))
ggplot(data = companies, aes(x = industry, y = yrs_on_list)) +
geom_boxplot() +
theme(axis.text.x = element_text(angle = 45,
hjust = 1))
ggplot(data = companies, aes(x = industry)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1))
ggplot(data = companies, aes(x = revenue)) +
geom_histogram()
# Load all of the packages that you end up using
# in your analysis in this code chunk.
# Notice that the parameter "echo" was set to FALSE for this code chunk.
# This prevents the code from displaying in the knitted HTML output.
# You should set echo=FALSE for all code chunks in your file.
library(ggplot2)
library(GGally)
# eliminates scientific notation when printing large numbers
options(scipen=999)
# Load the Data into "companies"
# See WrangleInc5000.py for python code that cleaned and
# subsetted original CSV before importing to R
getwd()
setwd("/Users/horsepower/Dropbox/Udacity/NanoDA/EDAwithR/Project3/")
companies <- read.csv("Inc5000_Companies_2014_subset.csv")
# Rename the first column with a null variable name to "rowNum"
names(companies)[names(companies) == 'X'] <- 'row_num'
names(companies)
dim(companies)
str(companies)
# Change rank to ordered factor since the variable
# is categorical and order matters
companies$rank <- as.ordered(companies$rank)
companies$rank <- ordered(companies$rank, levels=rev(levels(companies$rank)))
levels(companies$state_l)
levels(companies$state_l)
summary(companies)
ggplot(data = companies, aes(x = state_l)) +
geom_bar() +
xlab("State") +
ylab("Count") +
# densely packed x axis labels need spacing
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) +
ggtitle("Count of states where
companies are located")
ggplot(data = companies, aes(x = workers)) +
geom_histogram() +
xlab("Workers") +
ylab("Count") +
ggtitle("Count of Workers")
ggplot(data = companies, aes(x = workers)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
# cut out some outliers
xlim(0, 1000) +
xlab("Workers") +
ylab("Count") +
ggtitle("Count of Workers")
ggplot(data = companies, aes(x = workers)) +
geom_histogram(binwidth = .05,
color = 'black', fill = '#F79420') +
scale_x_log10() +
xlab("Workers") +
ylab("Count") +
ggtitle("Count of Workers (log10)")
summary(companies$workers)
ggplot(data = companies, aes(x = industry)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1))
ggplot(data = companies, aes(x = revenue)) +
geom_histogram()
library(ggplot)
library(ggplot2)
ggplot(data = companies, aes(x = revenue)) +
geom_histogram(color = 'black', fill = '#F79420')
ggplot(data = companies, aes(x = revenue)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_histogram(color = 'black', fill = '#F79420')
)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_log10(limits = c(0, 50000000
)
)
ggplot(data = companies, aes(x = revenue)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_log10() +
scale_x_continuous(limits = c(0, 50000000))
ggplot(data = companies, aes(x = revenue)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(limits = c(0, 50000000), trans = "log10")
ggplot(data = companies, aes(x = revenue)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(trans = "log10")
ggplot(data = companies, aes(x = revenue)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(trans = "log10", limits = c(0, 50000000))
ggplot(data = companies, aes(x = revenue)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(trans = "log10", limits = c(0, 100000000))
ggplot(data = companies, aes(x = revenue)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(trans = "log10")
ggplot(data = companies, aes(x = growth)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_continuous(limits = c(0, 1000))
ggplot(data = companies, aes(x = growth)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_histogram(binwidth = 0.1,
color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_histogram(binwidth = 0.2,
color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_histogram(binwidth = 0.05,
color = 'black', fill = '#F79420') +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_histogram(binwidth = 10,
color = 'black', fill = '#F79420') +
scale_x_continuous(limits = c(0, 1000))
ggplot(data = companies, aes(x = growth)) +
geom_histogram(binwidth = 0.05,
color = 'black', fill = '#F79420') +
scale_x_log10()
(x = growth)) +
geom_freqpoly() +
(x = growth)) +
geom_freqpoly() +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_freqpoly() +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_density() +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_density() +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
geom_freqpoly(aes(x = growth)) +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
geom_freqpoly(aes(color = growth)) +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly(aes(x = growth)) +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_freqpoly() +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
geom_freqpoly(aes(x = growth)) +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
geom_freqpoly(aes(x = growth, colour = x)) +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
geom_freqpoly(aes(x = growth, colour = growth)) +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
geom_freqpoly(aes(x = growth)) +
scale_x_log10()
library(gridExtra)
grid.arrange(p.growth, p.revenue)
p.growth <- ggplot(data = companies, aes(x = growth)) +
geom_freqpoly() +
scale_x_log10()
p.revenue <- ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
scale_x_log10()
source('~/.active-rstudio-document', echo=TRUE)
p.growth <- ggplot(data = companies, aes(x = growth)) +
geom_freqpoly() +
scale_x_log10()
p.revenue <- ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
scale_x_log10()
grid.arrange(p.growth, p.revenue)
grid.arrange(p.growth, p.revenue, ncol = 1)
grid.arrange(p.growth, p.revenue, nrow = 1)
p.revenue <- ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
scale_x_log10() +
scale_y_continuous(limits = c(0, 600))
grid.arrange(p.growth, p.revenue, nrow = 1)
ggplot(data = companies, aes(x = growth)) +
geom_density() +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_density() +
scale_x_log10()
freqp.growth <- ggplot(data = companies, aes(x = growth)) +
geom_freqpoly() +
scale_x_log10()
freqp.revenue <- ggplot(data = companies, aes(x = revenue)) +
geom_freqpoly() +
scale_x_log10() +
scale_y_continuous(limits = c(0, 600))
grid.arrange(freqp.growth, freqp.revenue, nrow = 1)
dens.growth <- ggplot(data = companies, aes(x = growth)) +
geom_density() +
scale_x_log10()
dens.growth <- ggplot(data = companies, aes(x = growth)) +
geom_density() +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_density() +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_density() +
scale_x_log10()
ggplot(data = companies, aes(x = revenue)) +
geom_density() +
scale_x_log10() +
scale_y_continuous(limits = c(0, 1))
dens.revenue <- ggplot(data = companies, aes(x = revenue)) +
geom_density() +
scale_x_log10() +
scale_y_continuous(limits = c(0, 1))
grid.arrange(dens.growth, dens.revenue, nrow = 1)
ggplot(data = companies, aes(x = revenue)) +
geom_point() +
scale_x_log10() +
scale_y_continuous(limits = c(0, 1))
ggplot(data = companies, aes(x = growth)) +
geom_area() +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_density2d() +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_dotplot() +
scale_x_log10()
ggplot(data = companies, aes(x = growth)) +
geom_dotplot()
ggplot(data = companies, aes(x = growth)) +
geom_dotplot()
ggplot(data = companies, aes(x = growth)) +
geom_polygon()
ggplot(data = companies, aes(x = growth)) +
geom_ribbon()
grid.arrange(dens.growth, dens.revenue, nrow = 1)
library(dplyr)
state_growth <- companies %>%
group_by(state_l) %>%
summarise(state_growth_dollar = sum(growth_dollar)) %>%
ungroup() %>%
arrange(state_l)
state_growth <- merge(x = state_growth,
y = subset(population,
select = c("Geographic_Area", "Est_2014")),
by.x = "state_l", by.y = "Geographic_Area")
names(state_growth)[names(state_growth) == 'Est_2014'] <- 'state_population2014'
state_growth$state_population2014 <- as.numeric(gsub(",", "",
state_growth$state_population2014))
state_growth$growth_per_capita <- state_growth$state_growth_dollar/
state_growth$state_population2014
# Population numbers have commas separating the thousands place.
# Must convert population to numeric to perform arithmetic
population <- read.csv("state_population_census.csv", stringsAsFactors=FALSE)
head(population)
library(dplyr)
state_growth <- companies %>%
group_by(state_l) %>%
summarise(state_growth_dollar = sum(growth_dollar)) %>%
ungroup() %>%
arrange(state_l)
state_growth <- merge(x = state_growth,
y = subset(population,
select = c("Geographic_Area", "Est_2014")),
by.x = "state_l", by.y = "Geographic_Area")
names(state_growth)[names(state_growth) == 'Est_2014'] <- 'state_population2014'
state_growth$state_population2014 <- as.numeric(gsub(",", "",
state_growth$state_population2014))
state_growth$growth_per_capita <- state_growth$state_growth_dollar/
state_growth$state_population2014
companies$revenue2013 <- companies$revenue/((companies$growth/100) + 1)
head(companies$revenue2013)
companies$growth_dollar <- companies$revenue - companies$revenue2013
head(companies$growth_dollar)
# renames original columns for clarity
names(companies)[names(companies) == 'revenue'] <- 'revenue2014'
names(companies)[names(companies) == 'growth'] <- 'growth_percentage'
library(dplyr)
state_growth <- companies %>%
group_by(state_l) %>%
summarise(state_growth_dollar = sum(growth_dollar)) %>%
ungroup() %>%
arrange(state_l)
state_growth <- merge(x = state_growth,
y = subset(population,
select = c("Geographic_Area", "Est_2014")),
by.x = "state_l", by.y = "Geographic_Area")
names(state_growth)[names(state_growth) == 'Est_2014'] <- 'state_population2014'
state_growth$state_population2014 <- as.numeric(gsub(",", "",
state_growth$state_population2014))
state_growth$growth_per_capita <- state_growth$state_growth_dollar/
state_growth$state_population2014
View(state_growth)
state_growth <- arrange(state_growth, desc(growth_per_capita))
View(state_growth)
state_growth <- arrange(state_growth, desc(state_growth_dollar))
View(state_growth)
ggplot(data = state_growth, aes(x = state_growth_dollar)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(name = "State Growth Dollars", labels = comma)
library(scales)
ggplot(data = state_growth, aes(x = state_growth_dollar)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(name = "State Growth Dollars", labels = comma)
ggplot(data = state_growth, aes(x = growth_per_capita)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(name = "State Growth per capita", labels = comma)
ggplot(data = state_growth, aes(x = growth_per_capita)) +
geom_histogram(color = 'black', fill = '#F79420') +
scale_x_continuous(name = "State Growth per capita")
state_growth <- arrange(state_growth, desc(growth_per_capita))
View(state_growth)
str(state_growth)
str(companies)
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420') +
theme(axis.text.x = element_text(angle = 45,
hjust = 1))
state_growth <- arrange(state_growth, desc(growth_per_capita))
ggplot(data = state_growth, aes(x = factor(state_l, levels = state_l),
y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420') +
xlab("State") +
ylab("Fast growth dollars per capita") +
# densely packed x axis labels need spacing
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) +
ggtitle("Revenue growth by state, normalized by population")
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420') +
theme(axis.text.x = element_text(angle = 45,
hjust = 1))
state_growth <- arrange(state_growth, desc(growth_per_capita))
ggplot(data = state_growth, aes(x = factor(state_l, levels = state_l),
y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420') +
xlab("State") +
ylab("Fast growth dollars per capita") +
# densely packed x axis labels need spacing
theme(axis.text.x = element_text(angle = 45,
hjust = 1)) +
ggtitle("Revenue growth by state, normalized by population")
ggplot(data = state_growth, aes(x = state_l, y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420') +
theme(axis.text.x = element_text(angle = 90,
hjust = 1))
ggplot(data = state_growth, aes(x = factor(state_l, levels = state_l),
y = growth_per_capita)) +
geom_bar(stat = "identity", color = 'black', fill = '#F79420') +
xlab("State") +
ylab("Fast growth dollars per capita") +
# densely packed x axis labels need spacing
theme(axis.text.x = element_text(angle = 90,
hjust = 1)) +
ggtitle("Revenue growth by state, normalized by population")
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_point()
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 1300), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 15000), aes(y = "Growth (percent)"))
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/5) +
scale_x_continuous(limits = c(0, 500), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 5000), aes(y = "Growth (percent)")) +
scale_x_log10()
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/2) +
scale_x_continuous(limits = c(0, 100), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 1000), aes(y = "Growth (percent)")) +
scale_x_log10()
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_point()
ggplot(data = companies, aes(x = revenue2014, y = growth_dollar)) +
geom_point()
cor.test(companies$revenue2014, companies$growth_percentage)
cor.test(companies$revenue2014, companies$growth_dollar)
ggplot(data = companies, aes(x = industry)) +
geom_bar() +
theme(axis.text.x = element_text(angle = 90,
hjust = 1))
cor.test(companies$revenue2014, companies$growth_percentage)
cor.test(companies$revenue2014, companies$growth_percentage)
cor.test(companies$revenue2014, companies$growth_percentage)
cor.test(companies$revenue2014, companies$growth_dollar)
ggplot(data = companies, aes(x = revenue2014, y = growth_dollar)) +
geom_point()
cor.test(companies$revenue2014, companies$growth_dollar)
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_point()
ggplot(data = companies, aes(x = revenue2013, y = growth_dollar)) +
geom_point()
cor.test(companies$revenue2013, companies$growth_dollar)
ggplot(data = companies, aes(x = revenue2014, y = growth_percentage)) +
geom_point()
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_point() +
scale_x_continuous(limits = c(0, 1300), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 15000), aes(y = "Growth (percent)"))
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/5) +
scale_x_continuous(limits = c(0, 500), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 5000), aes(y = "Growth (percent)")) +
scale_x_log10()
ggplot(data = companies, aes(x = revenue2014/1000000, y = growth_percentage)) +
geom_jitter(alpha = 1/2) +
scale_x_continuous(limits = c(0, 100), aes(x = "Revenue (Millions)")) +
scale_y_continuous(limits = c(0, 1000), aes(y = "Growth (percent)")) +
scale_x_log10()
