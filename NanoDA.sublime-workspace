{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"order",
				"orderInfo"
			],
			[
				"ord",
				"orderDetailInfo"
			],
			[
				"or",
				"orderInfo〔variable〕"
			],
			[
				"cust",
				"customerInfo〔variable〕"
			],
			[
				"order_",
				"order_detail_query"
			],
			[
				"q",
				"queryOrderDetail"
			],
			[
				"cu",
				"customerID〔variable〕"
			],
			[
				"C",
				"Customer_GoldenData_Record"
			],
			[
				"Cust",
				"CustomerID"
			],
			[
				"cus",
				"customer_query_key〔variable〕"
			],
			[
				"a",
				"authWSDL"
			],
			[
				"aut",
				"authClient〔variable〕"
			],
			[
				"auth",
				"authWSDL〔variable〕"
			],
			[
				"pa",
				"password〔variable〕"
			],
			[
				"user",
				"username〔variable〕"
			],
			[
				"d",
				"def	Function"
			],
			[
				"im",
				"ifmain	if __name__ == '__main__'"
			],
			[
				"fr",
				"fraction〔variable〕"
			],
			[
				"po",
				"poi_messages〔argument〕"
			],
			[
				"poi",
				"poi_messages_removed_NaN〔variable〕"
			],
			[
				"all",
				"all_messages〔argument〕"
			],
			[
				"ma",
				"max_line_num〔variable〕"
			],
			[
				"li",
				"line_num〔variable〕"
			],
			[
				"max",
				"max_count〔variable〕"
			],
			[
				"f",
				"filename"
			],
			[
				"ne",
				"net_worths_train〔argument〕"
			],
			[
				"quan",
				"quantify_NaN_feature〔function〕"
			],
			[
				"qu",
				"quantify_poi_NaN_feature"
			],
			[
				"feat",
				"feature_poi"
			],
			[
				"fea",
				"feature2"
			],
			[
				"audi",
				"audit_person_feature〔function〕"
			],
			[
				"J",
				"JEFFREY"
			],
			[
				"aud",
				"audit_jeffrey_skilling"
			],
			[
				"nu",
				"num_poi"
			],
			[
				"num",
				"num_poi〔variable〕"
			],
			[
				"en",
				"enron_data〔module〕"
			],
			[
				"la",
				"labels_train〔variable〕"
			],
			[
				"cl",
				"classmethod〔class〕"
			],
			[
				"p",
				"pred"
			],
			[
				"c",
				"clf"
			],
			[
				"list",
				"list_offices〔function〕"
			],
			[
				"offic",
				"offices〔variable〕"
			],
			[
				"l",
				"list_amenities"
			],
			[
				"uni",
				"unique_users"
			],
			[
				"users",
				"users_results"
			],
			[
				"db",
				"db_name〔argument〕"
			],
			[
				"if",
				"ifmain	if __name__ == '__main__'"
			],
			[
				"city",
				"cityname〔argument〕"
			],
			[
				"clean",
				"clean_city〔function〕"
			],
			[
				"audit",
				"audit_data〔function〕"
			],
			[
				"count",
				"count_auckland〔variable〕"
			],
			[
				"cou",
				"count_auckland"
			],
			[
				"miss",
				"missing_cities〔function〕"
			],
			[
				"ret",
				"retrieve_streets〔function〕"
			],
			[
				"retr",
				"retrieve_cities"
			],
			[
				"qer",
				"query"
			],
			[
				"Mon",
				"MongoDB"
			],
			[
				"process",
				"process_map"
			],
			[
				"att",
				"attributes"
			],
			[
				"proc",
				"process_element〔function〕"
			],
			[
				"stre",
				"street_name〔argument〕"
			],
			[
				"street_",
				"street_name"
			],
			[
				"st",
				"street"
			],
			[
				"street",
				"street_name"
			],
			[
				"stree",
				"street_direction_re〔variable〕"
			],
			[
				"str",
				"street_types"
			],
			[
				"ref",
				"ref_val〔variable〕"
			],
			[
				"node",
				"node_refs"
			],
			[
				"no",
				"node_refs〔variable〕"
			],
			[
				"attr",
				"attrib"
			],
			[
				"attri",
				"attributes"
			],
			[
				"star",
				"start_colon〔variable〕"
			],
			[
				"lower",
				"lower_colon〔variable〕"
			],
			[
				"cr",
				"created〔variable〕"
			],
			[
				"add",
				"add_to_created"
			],
			[
				"e",
				"element"
			],
			[
				"sta",
				"start_pos〔variable〕"
			],
			[
				"map",
				"mapping〔argument〕"
			],
			[
				"way",
				"ways〔variable〕"
			],
			[
				"st_",
				"st_types"
			],
			[
				"A",
				"Avenue"
			],
			[
				"ele",
				"element_dict〔variable〕"
			],
			[
				"pro",
				"problemchars〔variable〕"
			],
			[
				"por",
				"problemchars"
			],
			[
				"reg",
				"regionalAvg"
			],
			[
				"av",
				"avg"
			],
			[
				"tw",
				"tweet_texts"
			],
			[
				"scr",
				"screen_name"
			],
			[
				"time",
				"time_zone"
			],
			[
				"tim",
				"timezone"
			],
			[
				"best",
				"best_fit"
			],
			[
				"in",
				"intercept〔variable〕"
			],
			[
				"norm",
				"norm_precipi〔variable〕"
			],
			[
				"nor",
				"norm_precipi〔variable〕"
			],
			[
				"preici",
				"precipitation"
			],
			[
				"plt",
				"plt〔module〕"
			],
			[
				"n",
				"norm_entries"
			],
			[
				"arr",
				"array〔argument〕"
			],
			[
				"result",
				"results_summary"
			],
			[
				"para",
				"parameters〔variable〕"
			],
			[
				"day",
				"day_week"
			],
			[
				"dum",
				"dummy_rain〔variable〕"
			],
			[
				"dat",
				"dataframe〔argument〕"
			],
			[
				"pre",
				"prediction〔variable〕"
			],
			[
				"dumm",
				"dummy_units〔variable〕"
			],
			[
				"turn",
				"turnstile_weather"
			],
			[
				"withou",
				"without_rain"
			],
			[
				"with",
				"with_rain〔variable〕"
			],
			[
				"wi",
				"with_rain〔variable〕"
			],
			[
				"Sh",
				"Shapiro"
			],
			[
				"fi",
				"field〔variable〕"
			],
			[
				"update",
				"updated〔variable〕"
			],
			[
				"class",
				"classification"
			],
			[
				"clas",
				"classification〔variable〕"
			],
			[
				"new",
				"new_field〔variable〕"
			],
			[
				"input",
				"input_line〔argument〕"
			],
			[
				"fiel",
				"fields〔argument〕"
			],
			[
				"proces",
				"process_fields〔variable〕"
			],
			[
				"check",
				"check_valid_domain"
			],
			[
				"ex",
				"extract_year"
			],
			[
				"write",
				"writerow"
			],
			[
				"writer_outpu",
				"writer_output_bad"
			],
			[
				"writer_out",
				"writer_output_bad"
			],
			[
				"wr",
				"writer_output_good"
			],
			[
				"output",
				"output_bad"
			],
			[
				"output_",
				"output_good"
			],
			[
				"inval",
				"invalid_years"
			],
			[
				"inv",
				"invalid_years"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#import logging\nimport datetime\n\n#logging.basicConfig(level=logging.INFO)\n#logging.getLogger('suds.client').setLevel(logging.DEBUG)\nfrom suds.client import Client\nauthWSDL = 'http://54.85.135.37/semarchy/ws/1.0/data/PerfectCustomerData/0.0/PerfectCustomerData?wsdl'\n\nusername = 'semadmin'\npassword = 'semadmin'\nclient = Client(authWSDL, username = username, password = password)\n\ndef queryCustomer(name):\n    t0 = datetime.datetime.now()\n    print \"Start query time:\", t0.strftime(\"%A, %B %d, %Y %I:%M:%S.%f %p\")\n\n    customer_query_key = client.factory.create('SemQLFilterQueryType')\n    # StandardizedFullName = 'Caryl Grassi'\n    customer_query_key.SemQLCondition = 'StandardizedFullName = ' + \"'\" + name.upper() + \"'\"\n    customer_query = client.service.getCustomer_GoldenData_List(customer_query_key)\n    \n    if customer_query:\n        print customer_query\n        \n        # find the customer ID to retrieve orders\n        for i, attribute in enumerate(customer_query.Customer_GoldenData_Record[0]):\n            if attribute[0] == 'CustomerID':\n                customerID = customer_query.Customer_GoldenData_Record[0][i]\n                # print customerID\n                # find all orders based on customerID\n                order_query = queryOrder(customerID)\n                \n                if order_query:\n                    print order_query\n\n                    # find the orderIDs to retrieve ordersDetails\n                    for i, order in enumerate(order_query.Order_GoldenData_Record):\n                        orderNum = order[\"OrderID\"]\n                        order_detail_query = queryOrderDetail(orderNum) \n                        \n                        if order_detail_query:\n                            print order_detail_query\n                        else: \n                            \"No order details found\"\n                else: \n                    \"No orders found\"\n    else:\n        print \"No customer with that name found\"\n        \n    t1 = datetime.datetime.now()\n    # print \"End query time:\", t1.strftime(\"%A, %B %d, %Y %I:%M:%S.%f %p\")\n    # print \"Time taken to run query:\", (t1 - t0)\n    # return customer_query, order_query, order_detail_query\n\ndef queryOrder(customerID):\n    order_query_key = client.factory.create('SemQLFilterQueryType')\n    order_query_key.SemQLCondition = 'Customer.CustomerID = ' + str(customerID)\n    order_query = client.service.getOrder_GoldenData_List(order_query_key)\n    return order_query\n\ndef queryOrderDetail(orderNum):\n    order_detail_query_key = client.factory.create('SemQLFilterQueryType')\n    order_detail_query_key.SemQLCondition = 'FID_OrderNum = ' + \"'\" + str(orderNum) + \"'\" \n    order_detail_query = client.service.getOrderDetail_GoldenData_List(order_detail_query_key)\n    return order_detail_query\n\n\n# print queryCustomer('Caryl Grassi')\n\nqueryCustomer('Caryl Grassi')",
			"file": "/Users/horsepower/Documents/temp/bose/bosegetcustomer.py",
			"file_size": 2851,
			"file_write_time": 130831091450000000,
			"settings":
			{
				"buffer_size": 2860,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "# -*- coding: utf-8 -*-\n\"\"\"\nInstructions:\n- pip install flask\n- replace getCustomerOrderOrderDetailData() with your method, which takes a string and returns a string (you can return HTML if you want)\n- run this Python script\n- open a browser and go to localhost:5000\n\"\"\"\n\nfrom flask import Flask, render_template, request, url_for\napp = Flask(__name__)\n\ndef getHTML(htmlToPrint):\n    pageHTML = (\"\"\"\n<html>\n    <head>\n        <title>Web Services demo</title>\n        <link rel=stylesheet type=text/css href=\"/static/webapp.css\">\n    </head>\n    <body>\n\n        <div id=\"mainContent\">\n            <div class=\"title\">\n                <div id=\"topBanner\" >\n                    <img src=\"/static/bose.png\" />\n                </div>\n                <h1>Web Services demo</h1>\n                <h2>Bose call center</2>\n            </div> \n            <div id=\"columnOne\">\n                \n                  <label for=\"yourname\">Enter a name:</label>\n                  <form method=\"post\" action=\"/\">\n                  <input type=\"text\" name=\"yourname\" /><br />\n                  <input type=\"submit\" />\n                </form>\n            </div>\n            <div class=\"title\">\n                <h2>Result</h2>\n            </div>\n            <pre> \"\"\" + htmlToPrint + \"\"\"</pre>\n            </div>\n        </div>\n    </body>\n</html>\n    \"\"\")\n    return pageHTML\n    \ndef getCustomerOrderOrderDetailData(name):\n    #import logging\n    import datetime\n    from suds.client import Client\n    authWSDL = 'http://54.85.135.37/semarchy/ws/1.0/data/PerfectCustomerData/0.0/PerfectCustomerData?wsdl'\n\n    username = 'semadmin'\n    password = 'semadmin'\n    client = Client(authWSDL, username = username, password = password)\n\n    t0 = datetime.datetime.now()\n    print \"Start query time:\", t0.strftime(\"%A, %B %d, %Y %I:%M:%S.%f %p\")\n\n    customerInfo = []\n    orderInfo = []\n    orderDetailInfo = []\n\n    customer_query_key = client.factory.create('SemQLFilterQueryType')\n    # StandardizedFullName = 'Caryl Grassi'\n    customer_query_key.SemQLCondition = 'StandardizedFullName = ' + \"'\" + name.upper() + \"'\"\n    customer_query = client.service.getCustomer_GoldenData_List(customer_query_key)\n    \n    if customer_query:\n        customerInfo.append(customer_query)\n        \n        # find the customer ID to retrieve orders\n        for i, attribute in enumerate(customer_query.Customer_GoldenData_Record[0]):\n            if attribute[0] == 'CustomerID':\n                customerID = customer_query.Customer_GoldenData_Record[0][i]\n                # print customerID\n                # find all orders based on customerID\n                def queryOrder(customerID):\n                    order_query_key = client.factory.create('SemQLFilterQueryType')\n                    order_query_key.SemQLCondition = 'Customer.CustomerID = ' + str(customerID)\n                    order_query = client.service.getOrder_GoldenData_List(order_query_key)\n                    return order_query\n\n                order_query = queryOrder(customerID)\n                \n                if order_query:\n                    orderInfo.append(order_query)\n\n                    # find the orderIDs to retrieve ordersDetails\n                    for i, order in enumerate(order_query.Order_GoldenData_Record):\n                        orderNum = order[\"OrderID\"]\n\n\n                        def queryOrderDetail(orderNum):\n                            order_detail_query_key = client.factory.create('SemQLFilterQueryType')\n                            order_detail_query_key.SemQLCondition = 'FID_OrderNum = ' + \"'\" + str(orderNum) + \"'\" \n                            order_detail_query = client.service.getOrderDetail_GoldenData_List(order_detail_query_key)\n                            return order_detail_query\n\n                        order_detail_query = queryOrderDetail(orderNum) \n                        \n                        if order_detail_query:\n                            orderDetailInfo.append(order_detail_query)\n                            \n                    if orderDetailInfo[0] != None: \n                        return str((customerInfo, orderInfo, orderDetailInfo))\n                    else: \n                        print \"No order details found\"\n                        return str((customerInfo, orderInfo))\n                else: \n                    print \"No orders found\"\n                    return str((customerInfo))\n    \n    else:\n        return \"No customer with that name found\"\n        \n    t1 = datetime.datetime.now()\n    # print \"End query time:\", t1.strftime(\"%A, %B %d, %Y %I:%M:%S.%f %p\")\n    # print \"Time taken to run query:\", (t1 - t0)\n    # return customer_query, order_query, order_detail_query\n\n\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef retrieveGoldenRecord():\n    if request.method == 'POST':\n        name=request.form['yourname']\n        htmlToPrint = getCustomerOrderOrderDetailData(name)\n        return getHTML(htmlToPrint)\n    else:\n        return getHTML(\"(Enter a name above to see data)\")\n\nif __name__ == '__main__':\n    app.run(debug=True)\n",
			"file": "/Users/horsepower/Documents/temp/bose/webapp.py",
			"file_size": 5186,
			"file_write_time": 130831258940000000,
			"settings":
			{
				"buffer_size": 5050,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/horsepower/Google Drive/Semarchy USA/Clients/Exxact/Synnex Files/category_list.txt",
			"settings":
			{
				"buffer_size": 86228,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/horsepower/Documents/temp/bose/static/webapp.css",
			"settings":
			{
				"buffer_size": 7133,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 67.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"pwd",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/datasets_questions",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/feature_selection",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/naive_bayes",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/regression"
	],
	"file_history":
	[
		"/Users/horsepower/Google Drive/Semarchy USA/Clients/Exxact/Ingram_headers.txt",
		"/Users/horsepower/Google Drive/Semarchy USA/Clients/Exxact/Synnex Files/flat_file_P&A_desc_template.txt",
		"/Users/horsepower/Google Drive/Semarchy USA/Clients/Exxact/Synnex Files/368771.txt",
		"/Users/horsepower/Google Drive/Semarchy USA/Clients/Exxact/PRICE.TXT",
		"/Users/horsepower/Google Drive/Semarchy USA/Clients/Exxact/Ingram_test_headers.txt",
		"/Users/horsepower/Documents/temp/soap3.py",
		"/Users/horsepower/Documents/temp/bose/webapp.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/feature_selection/studentCode.py",
		"/Users/horsepower/Documents/temp/soap.py",
		"/Users/horsepower/Documents/temp/soap2.py",
		"/Users/horsepower/Documents/temp/bosesoap.py",
		"/Users/horsepower/Documents/temp/bosegetcustomer.py",
		"/Users/horsepower/Documents/temp/webapp.py",
		"/Users/horsepower/Google Drive/Semarchy USA/Clients/Exxact/Synnex Files/SYNNEX_Categories.txt",
		"/Users/horsepower/Google Drive/Semarchy USA/Projects_US/AWS/semarchy-quick-config-backup20150505/index.jsp",
		"/Users/horsepower/Google Drive/SQL script Library/Semarchy Demo/Repo.sql",
		"/Users/horsepower/Google Drive/SQL script Library/Juniper/KillDIJob.sql",
		"/Users/horsepower/Google Drive/Semarchy USA/Projects_US/Demo Server/OpenID JDBCRealm Authorization.sql",
		"/Users/horsepower/Google Drive/SQL script Library/AWS RDS schemas/Latest Schema naming conventions Aug 18 2014.sql",
		"/Users/horsepower/Documents/temp/BOSE_SBL_CUST_SR_100000lines.txt",
		"/Users/horsepower/Documents/temp/check_length.py",
		"/Users/horsepower/Google Drive/Semarchy USA/Clients/DiamondStream/Troubleshooting/gca_patron.log",
		"/Users/horsepower/Google Drive/Semarchy USA/Clients/DiamondStream/Troubleshooting/gca_patronmerge.log",
		"/Users/horsepower/Google Drive/Semarchy USA/Clients/DiamondStream/Troubleshooting/gca_patron.bad",
		"/Users/horsepower/Documents/temp/DS_MDM_Map BIRST_INITIAL_UPLOAD_TABLES to SD_PATRON_ENTITY.SQL",
		"/Users/horsepower/Documents/temp/Ongoing_2015-06-19_22-29-53_UTC.LOG",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/datasets_questions/explore_num_people.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/decision_tree/dt_author_id.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/final_project/ResourcesUsed.txt",
		"/Users/horsepower/Documents/temp/semarchy.xml",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/regression/studentRegression.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/regression/studentMain.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/datasets_questions/studentMain.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/decision_tree/DecisionTreeAccuracyMinSamplesSplitQuiz.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/choose_your_own/KNN.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/tools/email_preprocess_percentile_change.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/decision_tree/decisionTreeAccuracyQuiz.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/decision_tree/studentMain.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroMachineLearning/decision_tree/classifyDT.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/aklMongoAddressQueries.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson6/Notes",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/mongo-commands.txt",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/explore-dataset.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/aklMongoAddtlAnalysis.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson4/find-porsche.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/akldata.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/auckland.json",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/auckland.osm",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/auckland-sample.osm",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/Resources Used.txt",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/osm-auckland-sample.xml",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/aklcitycleaning.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/aklstreetaudit.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson6/example3.osm",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/osm-auckland.json",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/osm-auckland.xml",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/osm-auckland-test.json",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/aklaudit.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson6/data.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson6/audit.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/osm-auckland-test.xml",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/akl-audit.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson6/data-refactored.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson6/example2.osm",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson6/tags.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson6/users.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson6/osm-iterative-parsing.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson6/example.osm",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson3/auditing-streetmap-example.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson5/cities-infobox-example.json",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/region-cities.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson5/mongo-same-operator.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson5/most-common-city-name.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson5/avg-population.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/most-common-city-name.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson5/mongo-push.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson5/mongo-unwind.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson5/mongo-match-project.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson5/mongo-use-group.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience/Project1/Subway2Matplotlib-precipi-ridership.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience/Project1/Subway2Matplotlib-compare-shapes.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience/Project1/LinearRegressionOLS.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience/Project1/ResourcesUsed.md",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience/Project1/Subway2Matplotlib.py",
		"/Users/horsepower/anaconda/lib/python2.7/site-packages/numpy/lib/function_base.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience/Project/MannWhitneyUtest.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience/Project/LinearRegressionGradientDescent.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience/Project/ResourcesUsed.md",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience/Project/LinearRegressionOLS.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/lesson5/twitter-example.json",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p4/arachnid-update.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p5/mongo-use-group.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience/Project/Subway2Matplotlib.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p4/insert.py",
		"/Users/horsepower/Dropbox/Udacity/Tools/OracleSQL/ChangeSystemOracledatabase.txt",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p1/Analyze-Distinct-values.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p4/arachnid.json",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p4/arachnid-dbinsert.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p4/arachnid-processing-2nd-try.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p3/audit-cities.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/patent.data",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p3/FIXME-autos.csv",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p3/autos-valid.csv",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p3/validity.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p3/autos-shortened.csv",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p3/audit.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p3/autos.csv",
		"/Users/horsepower/Dropbox/Udacity/Tools/chown - change file owner group",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/auditing-streetmap-example.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/split-data.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/data:FL-ATL.html",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/patent.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/airports.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/process.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/process-submitted.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/page_source.html",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/options.html",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/Project2/airports.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/carriers.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/exampleResearchArticle.xml",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/html_soup.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/html_soup-SOLUTION.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/authorsINSRXML.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/authorsINSRXML-SOLUTION.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/exampleResearchArtcile.xml",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/authorsXML.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p2/authorsXML-SOLUTION.py",
		"/Users/horsepower/Dropbox/Udacity/NanoDA/DataWranglingMongoDB/p1/nytimes-SOLUTION.py"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/horsepower/Dropbox/Udacity/NanoDA",
			"/Users/horsepower/Dropbox/Udacity/NanoDA/IntroDataScience"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"laptop",
			"MSRP",
			"'p67'",
			"MSRP",
			"'p67'",
			"~",
			",",
			"~HDR~",
			"hdr~",
			"hdr",
			"e+",
			" ",
			"MSRP",
			"'p67'",
			"MSRP",
			"'p67'",
			"pre",
			"hello_world",
			"annasMethod",
			"olivier.pier",
			"*",
			";",
			"drop table",
			"[SBL].[Service Record]",
			"]",
			"[SBL].[Service Record].[",
			"^(\\w+)",
			"     , ",
			"^(\\w+)",
			"     , ",
			"^(\\w+)",
			"^( \\w+)",
			"^(\\w+) ",
			" ",
			"^( )(\\w+) ",
			"^( \\w+) ",
			"^(\\w+) ",
			"     ,",
			"^(     , \\w+) ",
			"^(      \\w+) ",
			"^(\\w+) ",
			"^(      \\w+) ",
			"\\n     ,",
			"^(\\w+) ",
			",",
			"\\n     ,",
			"^(\\w+) ",
			"^(\\w+) ,",
			"^(\\w)",
			"^(\\w",
			"melissa",
			"_",
			"ages_net_worths",
			"feature",
			"feature_poi",
			"jeffrey",
			"print",
			"address",
			"les mills",
			"cuisine",
			"sport",
			"population",
			"man_made",
			"leisure",
			"craft",
			"amenity",
			"religion",
			"amenity",
			"full",
			"num_users",
			"osm-auckland.xml",
			"created_by",
			"user",
			"created",
			"changeset",
			"\"user\"",
			"created_by",
			"user",
			"Queen st",
			"suburb",
			"Mount Wellington Highway",
			" Mount Wellington Highway",
			"Mount Wellington Highway",
			"Mt Wellington Highway",
			"Halsey Street",
			"suburb",
			"audit",
			"ies",
			"New North Rd",
			"suburb",
			"addr:suburb",
			"postal",
			"suburb",
			":suburb",
			"suburb",
			"mt",
			"albert",
			"Hurstmere",
			"Gillies Ave",
			"Gillies",
			"Balm St",
			"addr:",
			"directions",
			"json",
			"highway traffic_signals",
			"chicago:building_id",
			"attr",
			"lat",
			"hair",
			"\"",
			"match",
			"osm_file = open(\"chicago.osm\", \"r\")",
			"auditing",
			"end",
			"remove",
			"drop",
			"status",
			"tweets",
			"time_zone",
			"features_df",
			"ormalize_feat",
			"summary()",
			"summary",
			"coefficient",
			"data",
			"Hour",
			"hour",
			"Hour"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"SuggestedPrice",
			"PriceFormula",
			"SuggestedPrice",
			"PriceFormula ",
			"\\n",
			"_",
			"ManufacturerPrice",
			"PriceFormula",
			"ManufacturerPrice",
			"PriceFormula",
			"olivier.pieri",
			"* from ",
			" where ORDER_ID = 'D18317375'; ",
			"where ORDER_ID = 'D18317375'; ",
			"select *",
			"[Service Record]",
			"",
			" ",
			"",
			"min($1) as $1, ",
			"min($1) as $1,",
			"",
			"min($1) as $1,",
			"",
			"min($1) as $1,",
			"",
			"min($1) as $1,",
			",\\n     ",
			"min($1) as $1,",
			"$1 $1",
			"$1",
			"^(1) (1)",
			"  ",
			")\\n     ,",
			"\\n     , min(",
			"BOSE",
			" ",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/horsepower/Documents/temp/bose/bosegetcustomer.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2860,
						"regions":
						{
						},
						"selection":
						[
							[
								2789,
								405
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/horsepower/Documents/temp/bose/webapp.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5050,
						"regions":
						{
						},
						"selection":
						[
							[
								552,
								552
							]
						],
						"settings":
						{
							"auto_complete": false,
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1348.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/horsepower/Google Drive/Semarchy USA/Clients/Exxact/Synnex Files/category_list.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 86228,
						"regions":
						{
						},
						"selection":
						[
							[
								26486,
								26486
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 14265.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/horsepower/Documents/temp/bose/static/webapp.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7133,
						"regions":
						{
						},
						"selection":
						[
							[
								4860,
								4860
							]
						],
						"settings":
						{
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 35.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 208.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "NanoDA.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"DataWranglingMongoDB/Project2/aklMongoAddtlAnalysis.py"
			],
			[
				"sub",
				"Project/Subway2MatplotlibFreeform.py"
			],
			[
				"aa",
				"p5/aadhaar_generated_mapper.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 318.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
